use std::str::FromStr;
use dotenv::dotenv;
use alloy::{
  providers::ProviderBuilder, 
  sol, 
  transports::http::reqwest::Url, 
  network::EthereumWallet,
  signers::local::PrivateKeySigner,
};
use eyre::Result;

sol! {
    #[allow(missing_docs)]
    // solc v0.8.28; solc src/sol/Inbox.sol --bin
    #[sol(rpc, bytecode="6080604052348015600e575f5ffd5b50610b7b8061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061004a575f3560e01c80634972134a1461004e578063b32c4d8d1461006c578063f6b8e4811461009c578063fd237972146100b8575b5f5ffd5b6100566100d4565b604051610063919061033d565b60405180910390f35b61008660048036038101906100819190610391565b6100d9565b604051610093919061042c565b60405180910390f35b6100b660048036038101906100b191906104ad565b610174565b005b6100d260048036038101906100cd9190610620565b6101ec565b005b5f5481565b6001602052805f5260405f205f9150905080546100f5906106a7565b80601f0160208091040260200160405190810160405280929190818152602001828054610121906106a7565b801561016c5780601f106101435761010080835404028352916020019161016c565b820191905f5260205f20905b81548152906001019060200180831161014f57829003601f168201915b505050505081565b818160015f5f5481526020019081526020015f209182610195929190610881565b507f72a5f12a7972245e884f3a2c93467e52ee2ae2579fb04c769ff0c0e57e3494e65f5483836040516101ca9392919061097a565b60405180910390a15f5f8154809291906101e3906109d7565b91905055505050565b61028d60015f8481526020019081526020015f20805461020b906106a7565b80601f0160208091040260200160405190810160405280929190818152602001828054610237906106a7565b80156102825780601f1061025957610100808354040283529160200191610282565b820191905f5260205f20905b81548152906001019060200180831161026557829003601f168201915b50505050508261031a565b6102cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c390610a78565b60405180910390fd5b7f29fee588399885ca16a314d8422800d92b13bd8f0115ec908843cdc1ddd6e48e5f5460015f8581526020019081526020015f2060405161030e929190610b17565b60405180910390a15050565b5f6001905092915050565b5f819050919050565b61033781610325565b82525050565b5f6020820190506103505f83018461032e565b92915050565b5f604051905090565b5f5ffd5b5f5ffd5b61037081610325565b811461037a575f5ffd5b50565b5f8135905061038b81610367565b92915050565b5f602082840312156103a6576103a561035f565b5b5f6103b38482850161037d565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6103fe826103bc565b61040881856103c6565b93506104188185602086016103d6565b610421816103e4565b840191505092915050565b5f6020820190508181035f83015261044481846103f4565b905092915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f84011261046d5761046c61044c565b5b8235905067ffffffffffffffff81111561048a57610489610450565b5b6020830191508360018202830111156104a6576104a5610454565b5b9250929050565b5f5f602083850312156104c3576104c261035f565b5b5f83013567ffffffffffffffff8111156104e0576104df610363565b5b6104ec85828601610458565b92509250509250929050565b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610532826103e4565b810181811067ffffffffffffffff82111715610551576105506104fc565b5b80604052505050565b5f610563610356565b905061056f8282610529565b919050565b5f67ffffffffffffffff82111561058e5761058d6104fc565b5b610597826103e4565b9050602081019050919050565b828183375f83830152505050565b5f6105c46105bf84610574565b61055a565b9050828152602081018484840111156105e0576105df6104f8565b5b6105eb8482856105a4565b509392505050565b5f82601f8301126106075761060661044c565b5b81356106178482602086016105b2565b91505092915050565b5f5f604083850312156106365761063561035f565b5b5f6106438582860161037d565b925050602083013567ffffffffffffffff81111561066457610663610363565b5b610670858286016105f3565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806106be57607f821691505b6020821081036106d1576106d061067a565b5b50919050565b5f82905092915050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261073d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610702565b6107478683610702565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61078261077d61077884610325565b61075f565b610325565b9050919050565b5f819050919050565b61079b83610768565b6107af6107a782610789565b84845461070e565b825550505050565b5f5f905090565b6107c66107b7565b6107d1818484610792565b505050565b5b818110156107f4576107e95f826107be565b6001810190506107d7565b5050565b601f8211156108395761080a816106e1565b610813846106f3565b81016020851015610822578190505b61083661082e856106f3565b8301826107d6565b50505b505050565b5f82821c905092915050565b5f6108595f198460080261083e565b1980831691505092915050565b5f610871838361084a565b9150826002028217905092915050565b61088b83836106d7565b67ffffffffffffffff8111156108a4576108a36104fc565b5b6108ae82546106a7565b6108b98282856107f8565b5f601f8311600181146108e6575f84156108d4578287013590505b6108de8582610866565b865550610945565b601f1984166108f4866106e1565b5f5b8281101561091b578489013582556001820191506020850194506020810190506108f6565b868310156109385784890135610934601f89168261084a565b8355505b6001600288020188555050505b50505050505050565b5f61095983856103c6565b93506109668385846105a4565b61096f836103e4565b840190509392505050565b5f60408201905061098d5f83018661032e565b81810360208301526109a081848661094e565b9050949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6109e182610325565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a1357610a126109aa565b5b600182019050919050565b5f82825260208201905092915050565b7f496e76616c69642070726f6f66000000000000000000000000000000000000005f82015250565b5f610a62600d83610a1e565b9150610a6d82610a2e565b602082019050919050565b5f6020820190508181035f830152610a8f81610a56565b9050919050565b5f8154610aa2816106a7565b610aac81866103c6565b9450600182165f8114610ac65760018114610adc57610b0e565b60ff198316865281151560200286019350610b0e565b610ae5856106e1565b5f5b83811015610b0657815481890152600182019150602081019050610ae7565b808801955050505b50505092915050565b5f604082019050610b2a5f83018561032e565b8181036020830152610b3c8184610a96565b9050939250505056fea2646970667358221220630abcee2a6c4c926dd6235cfafb6ce7430a5a8c232f83a04225de8bcd7c0d2a64736f6c634300081c0033")]
    contract Inbox {
      uint256 public batchId;
  
      mapping(uint256 => bytes) public batches;
  
      event BatchProposed(uint256 batchId, bytes batchData);
      event BatchProved(uint256 batchId, bytes batchData);
  
      // anyone can propose a batch
      function proposeBatch(bytes calldata batchData) public {
        batches[batchId] = batchData;
        emit BatchProposed(batchId, batchData);
        batchId++;
      }
  
      // anyone can prove a batch
      function proveBatch(uint256 id, bytes memory proof) public {
        require(_verifyBatch(batches[id], proof), "Invalid proof");
        emit BatchProved(batchId, batches[id]);
      }
  
      function _verifyBatch(bytes memory _batch, bytes memory _proof) private pure returns (bool) {
        // TODO: implement proof verification.
        return true;
      }
  }
}

#[tokio::main]
async fn main() -> Result<()> {
  dotenv().ok(); 
  let pk = &std::env::var("PRIVATE_KEY").unwrap();
  let signer: PrivateKeySigner = PrivateKeySigner::from_str(pk).unwrap();
  let wallet = EthereumWallet::from(signer);

  // anvil node.
  let url = Url::from_str("http://localhost:8545").unwrap();
  let provider = ProviderBuilder::new()
    .wallet(wallet)
    .on_http(url);

  let contract = Inbox::deploy(&provider).await?;

  println!("Deployed contract at address: {}", contract.address());
  Ok(())
}