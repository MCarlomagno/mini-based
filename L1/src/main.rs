use alloy::{
    network::EthereumWallet, node_bindings::Anvil, providers::ProviderBuilder,
    signers::local::PrivateKeySigner, sol,
};
use dotenv::dotenv;
use eyre::Result;
use std::str::FromStr;

sol! {
    #[allow(missing_docs)]
    // solc v0.8.28; solc src/sol/Inbox.sol --bin
    #[sol(rpc, bytecode="6080604052348015600e575f5ffd5b50610efe8061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061004a575f3560e01c806316a958fb1461004e5780634972134a1461006a5780635d47964b14610088578063d739f05b146100b8575b5f5ffd5b610068600480360381019061006391906106bb565b6100d4565b005b610072610151565b60405161007f9190610724565b60405180910390f35b6100a2600480360381019061009d919061073d565b610156565b6040516100af91906107db565b60405180910390f35b6100d260048036038101906100cd91906107fb565b610207565b005b8160015f5f5481526020019081526020015f2090805190602001906100fa929190610387565b507f8d380006498fb353909b2a8300c9f36d27ec2268f2008da5a675528f33dcedee5f54838360405161012f9392919061096a565b60405180910390a15f5f815480929190610148906109d3565b91905055505050565b5f5481565b6001602052815f5260405f20818154811061016f575f80fd5b905f5260205f20015f9150915050805461018890610a47565b80601f01602080910402602001604051908101604052809291908181526020018280546101b490610a47565b80156101ff5780601f106101d6576101008083540402835291602001916101ff565b820191905f5260205f20905b8154815290600101906020018083116101e257829003601f168201915b505050505081565b6102ec60015f8581526020019081526020015f20805480602002602001604051908101604052809291908181526020015f905b828210156102e2578382905f5260205f2001805461025790610a47565b80601f016020809104026020016040519081016040528092919081815260200182805461028390610a47565b80156102ce5780601f106102a5576101008083540402835291602001916102ce565b820191905f5260205f20905b8154815290600101906020018083116102b157829003601f168201915b50505050508152602001906001019061023a565b505050508361037c565b61032b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032290610ad1565b60405180910390fd5b7fb3ba88d6bec44e1123ace856bc8ab8fac460ff007d960531a111ac8e3ae1f2725f5460015f8681526020019081526020015f208360405161036f93929190610c2f565b60405180910390a1505050565b5f6001905092915050565b828054828255905f5260205f209081019282156103cd579160200282015b828111156103cc5782518290816103bc9190610df9565b50916020019190600101906103a5565b5b5090506103da91906103de565b5090565b5b808211156103fd575f81816103f49190610401565b506001016103df565b5090565b50805461040d90610a47565b5f825580601f1061041e575061043b565b601f0160209004905f5260205f209081019061043a919061043e565b5b50565b5b80821115610455575f815f90555060010161043f565b5090565b5f604051905090565b5f5ffd5b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6104b48261046e565b810181811067ffffffffffffffff821117156104d3576104d261047e565b5b80604052505050565b5f6104e5610459565b90506104f182826104ab565b919050565b5f67ffffffffffffffff8211156105105761050f61047e565b5b602082029050602081019050919050565b5f5ffd5b5f5ffd5b5f67ffffffffffffffff8211156105435761054261047e565b5b61054c8261046e565b9050602081019050919050565b828183375f83830152505050565b5f61057961057484610529565b6104dc565b90508281526020810184848401111561059557610594610525565b5b6105a0848285610559565b509392505050565b5f82601f8301126105bc576105bb61046a565b5b81356105cc848260208601610567565b91505092915050565b5f6105e76105e2846104f6565b6104dc565b9050808382526020820190506020840283018581111561060a57610609610521565b5b835b8181101561065157803567ffffffffffffffff81111561062f5761062e61046a565b5b80860161063c89826105a8565b8552602085019450505060208101905061060c565b5050509392505050565b5f82601f83011261066f5761066e61046a565b5b813561067f8482602086016105d5565b91505092915050565b5f819050919050565b61069a81610688565b81146106a4575f5ffd5b50565b5f813590506106b581610691565b92915050565b5f5f604083850312156106d1576106d0610462565b5b5f83013567ffffffffffffffff8111156106ee576106ed610466565b5b6106fa8582860161065b565b925050602061070b858286016106a7565b9150509250929050565b61071e81610688565b82525050565b5f6020820190506107375f830184610715565b92915050565b5f5f6040838503121561075357610752610462565b5b5f610760858286016106a7565b9250506020610771858286016106a7565b9150509250929050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f6107ad8261077b565b6107b78185610785565b93506107c7818560208601610795565b6107d08161046e565b840191505092915050565b5f6020820190508181035f8301526107f381846107a3565b905092915050565b5f5f5f6060848603121561081257610811610462565b5b5f61081f868287016106a7565b935050602084013567ffffffffffffffff8111156108405761083f610466565b5b61084c868287016105a8565b925050604061085d868287016106a7565b9150509250925092565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f6108aa8261077b565b6108b48185610890565b93506108c4818560208601610795565b6108cd8161046e565b840191505092915050565b5f6108e383836108a0565b905092915050565b5f602082019050919050565b5f61090182610867565b61090b8185610871565b93508360208202850161091d85610881565b805f5b85811015610958578484038952815161093985826108d8565b9450610944836108eb565b925060208a01995050600181019050610920565b50829750879550505050505092915050565b5f60608201905061097d5f830186610715565b818103602083015261098f81856108f7565b905061099e6040830184610715565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f6109dd82610688565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a0f57610a0e6109a6565b5b600182019050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610a5e57607f821691505b602082108103610a7157610a70610a1a565b5b50919050565b5f82825260208201905092915050565b7f496e76616c69642070726f6f66000000000000000000000000000000000000005f82015250565b5f610abb600d83610a77565b9150610ac682610a87565b602082019050919050565b5f6020820190508181035f830152610ae881610aaf565b9050919050565b5f81549050919050565b5f819050815f5260205f209050919050565b5f819050815f5260205f209050919050565b5f8154610b2981610a47565b610b338186610890565b9450600182165f8114610b4d5760018114610b6357610b95565b60ff198316865281151560200286019350610b95565b610b6c85610b0b565b5f5b83811015610b8d57815481890152600182019150602081019050610b6e565b808801955050505b50505092915050565b5f610ba98383610b1d565b905092915050565b5f600182019050919050565b5f610bc782610aef565b610bd18185610871565b935083602082028501610be385610af9565b805f5b85811015610c1d57848403895281610bfe8582610b9e565b9450610c0983610bb1565b925060208a01995050600181019050610be6565b50829750879550505050505092915050565b5f606082019050610c425f830186610715565b8181036020830152610c548185610bbd565b9050610c636040830184610715565b949350505050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302610cb57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610c7a565b610cbf8683610c7a565b95508019841693508086168417925050509392505050565b5f819050919050565b5f610cfa610cf5610cf084610688565b610cd7565b610688565b9050919050565b5f819050919050565b610d1383610ce0565b610d27610d1f82610d01565b848454610c86565b825550505050565b5f5f905090565b610d3e610d2f565b610d49818484610d0a565b505050565b5b81811015610d6c57610d615f82610d36565b600181019050610d4f565b5050565b601f821115610db157610d8281610b0b565b610d8b84610c6b565b81016020851015610d9a578190505b610dae610da685610c6b565b830182610d4e565b50505b505050565b5f82821c905092915050565b5f610dd15f1984600802610db6565b1980831691505092915050565b5f610de98383610dc2565b9150826002028217905092915050565b610e028261077b565b67ffffffffffffffff811115610e1b57610e1a61047e565b5b610e258254610a47565b610e30828285610d70565b5f60209050601f831160018114610e61575f8415610e4f578287015190505b610e598582610dde565b865550610ec0565b601f198416610e6f86610b0b565b5f5b82811015610e9657848901518255600182019150602085019450602081019050610e71565b86831015610eb35784890151610eaf601f891682610dc2565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220cef4e8ce9ed1b046376b454393173b0ab9d33349e9264ac7b3ce4175d2bd57dc64736f6c634300081c0033")]
    contract Inbox {
        uint256 public batchId;

        mapping(uint256 => bytes[]) public batches;

        event BatchProposed(uint256 batchId, bytes[] batchData, uint256 blockNumber);
        event BatchProved(uint256 batchId, bytes[] batchData, uint256 blockNumber);

        // anyone can propose a batch
        function proposeBatch(bytes[] memory batchData, uint256 blockNumber) public {
            batches[batchId] = batchData;
            emit BatchProposed(batchId, batchData, blockNumber);
            batchId++;
        }

        // anyone can prove a batch
        function proveBatch(uint256 id, bytes memory proof, uint256 blockNumber) public {
            require(_verifyBatch(batches[id], proof), "Invalid proof");
            emit BatchProved(batchId, batches[id], blockNumber);
        }

        function _verifyBatch(bytes[] memory _batch, bytes memory _proof) private pure returns (bool) {
            // TODO: implement proof verification.
            return true;
        }
    }
}

#[tokio::main]
async fn main() -> Result<()> {
    dotenv().ok();
    // run node
    let l1_port_str = std::env::var("L1_PORT").unwrap();
    let l1_port = u16::from_str(&l1_port_str).unwrap();
    let anvil = Anvil::new()
        .keep_stdout()
        .port(l1_port)
        .block_time(1)
        .try_spawn()
        .unwrap();

    println!("running L1 node in port {:?} ðŸ›œ", anvil.port());

    let signer: PrivateKeySigner = anvil.keys()[0].clone().into();
    let wallet = EthereumWallet::from(signer);

    let rpc_url = anvil.endpoint_url();
    let provider = ProviderBuilder::new().wallet(wallet).on_http(rpc_url);
    let contract = Inbox::deploy(&provider).await?;

    println!(
        "Deployed L1 Inbox contract at address: {} ðŸš€",
        contract.address()
    );
    // Keep anvil alive
    println!("Press Ctrl+C to exit");
    tokio::signal::ctrl_c()
        .await
        .expect("Failed to listen for Ctrl+C");
    Ok(())
}
